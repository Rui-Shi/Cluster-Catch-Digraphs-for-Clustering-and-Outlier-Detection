# Sample Data
set.seed(123)
x <- rbind(matrix(rnorm(100, mean = 0, sd = 0.5), ncol = 2),
matrix(rnorm(100, mean = 3, sd = 0.6), ncol = 2))
# DBSCAN Clustering
library(dbscan)
result <- dbscan(x, eps = 0.45, MinPts = 5)
# Visualization
plot(x, col = result$cluster + 1, main = "DBSCAN Clustering", pch = 19)
result
library(dbscan)
library(dbscan)
DBSCAN = function(data, k, quant){
dist_M = as.matrix(dist(datax))
k_dist = apply(dist_M, 1, function(row){  # compute the k-distance for each point
return(sort(row)[k+1])
})
eps = quantile(k_dist, 1-quant) # find the eps of DBSCAN based on noise level
label = dbscan(datax, eps, k) # conduct DBSCAN
return(label=label)
}
DBSCAN(X, 4, 0.1)
library(dbscan)
DBSCAN = function(data, k, quant){
dist_M = as.matrix(dist(data))
k_dist = apply(dist_M, 1, function(row){  # compute the k-distance for each point
return(sort(row)[k+1])
})
eps = quantile(k_dist, 1-quant) # find the eps of DBSCAN based on noise level
label = dbscan(datax, eps, k) # conduct DBSCAN
return(label=label)
}
DBSCAN(X, 4, 0.1)
DBSCAN(x, 4, 0.1)
library(dbscan)
DBSCAN = function(data, k, quant){
dist_M = as.matrix(dist(data))
k_dist = apply(dist_M, 1, function(row){  # compute the k-distance for each point
return(sort(row)[k+1])
})
eps = quantile(k_dist, 1-quant) # find the eps of DBSCAN based on noise level
label = dbscan(data, eps, k) # conduct DBSCAN
return(label=label)
}
DBSCAN(x, 4, 0.1)
plot(x, col = result$cluster + 1, main = "DBSCAN Clustering", pch = 19)
result=DBSCAN(x, 4, 0.1)
plot(x, col = result$cluster + 1, main = "DBSCAN Clustering", pch = 19)
result=DBSCAN(x, 4, 0.2)
plot(x, col = result$cluster + 1, main = "DBSCAN Clustering", pch = 19)
DBSCAN(x, 4, 0.1)
a = DBSCAN(x, 4, 0.1)
a$cluster
a$cluster
# data: the input data set
# k:  The minimum number of points required within the eps radius to form a dense region (MinPts)
# quant: the (expected) percentage of outliers
library(dbscan)
DBSCAN = function(data, k, quant){
dist_M = as.matrix(dist(data))
k_dist = apply(dist_M, 1, function(row){  # compute the k-distance for each point
return(sort(row)[k+1])
})
eps = quantile(k_dist, 1-quant) # find the eps of DBSCAN based on the outlier level
label = dbscan(data, eps, k)$cluster # conduct DBSCAN
return(labels=label)
}
DBSCAN(x, 4, 0.1)
count_DBSCAN(x, 0.05, DBSCAN(x, 4, 0.1))
count_DBSCAN = function(data, cont, es_labels){
n = length(data)
n0 = round(n*cont)
n1 = n-n0
labels = c(rep(1,n1),rep(0,n0))
TPR = length(es_label[c(n1+1:n)]==0)/n0
TNR = length(es_label[c(1:n1)]!=0)/n1
BA = (TNR+TPR)/2
recall = TPR
precision = n0*TPR/(n0*TPR+(1-TNR)*(n-n0))
F2 = 5*precision*recall/(4*precision+recall)
if(is.na(F2)) F2=0
return(c(TPR=TPR,TNR=TNR,BA=BA,F2=F2))
}
count_DBSCAN(x, 0.05, DBSCAN(x, 4, 0.1))
DBSCAN(x, 4, 0.1)
l=DBSCAN(x, 4, 0.1)
count_DBSCAN(x, 0.05, l)
count_DBSCAN = function(data, cont, es_labels){
n = length(data)
n0 = round(n*cont)
n1 = n-n0
labels = c(rep(1,n1),rep(0,n0))
TPR = length(es_labels[c(n1+1:n)]==0)/n0
TNR = length(es_labels[c(1:n1)]!=0)/n1
BA = (TNR+TPR)/2
recall = TPR
precision = n0*TPR/(n0*TPR+(1-TNR)*(n-n0))
F2 = 5*precision*recall/(4*precision+recall)
if(is.na(F2)) F2=0
return(c(TPR=TPR,TNR=TNR,BA=BA,F2=F2))
}
count_DBSCAN(x, 0.05, l)
l
count_DBSCAN = function(data, cont, es_labels){
n = dim(data)[2]
n0 = round(n*cont)
n1 = n-n0
labels = c(rep(1,n1),rep(0,n0))
TPR = length(es_labels[c(n1+1:n)]==0)/n0
TNR = length(es_labels[c(1:n1)]!=0)/n1
BA = (TNR+TPR)/2
recall = TPR
precision = n0*TPR/(n0*TPR+(1-TNR)*(n-n0))
F2 = 5*precision*recall/(4*precision+recall)
if(is.na(F2)) F2=0
return(c(TPR=TPR,TNR=TNR,BA=BA,F2=F2))
}
count_DBSCAN(x, 0.05, l)
data = x
n = dim(data)[2]
n
count_DBSCAN = function(data, cont, es_labels){
n = dim(data)[1]
n0 = round(n*cont)
n1 = n-n0
labels = c(rep(1,n1),rep(0,n0))
TPR = length(es_labels[c(n1+1:n)]==0)/n0
TNR = length(es_labels[c(1:n1)]!=0)/n1
BA = (TNR+TPR)/2
recall = TPR
precision = n0*TPR/(n0*TPR+(1-TNR)*(n-n0))
F2 = 5*precision*recall/(4*precision+recall)
if(is.na(F2)) F2=0
return(c(TPR=TPR,TNR=TNR,BA=BA,F2=F2))
}
count_DBSCAN(x, 0.05, l)
n = dim(data)[1]
n
n0 = round(n*cont)
n = dim(data)[1]
cont=0.05
es_labels=l
n0 = round(n*cont)
n1 = n-n0
n1
labels = c(rep(1,n1),rep(0,n0))
TPR = length(es_labels[c(n1+1:n)]==0)/n0
es_labels[c(n1+1:n)]
c(n1+1:n)
c((n1+1):n)
count_DBSCAN = function(data, cont, es_labels){
n0 = round(n*cont)
n1 = n-n0
TPR = length(es_labels[c((n1+1):n)]==0)/n0
TNR = length(es_labels[c(1:n1)]!=0)/n1
BA = (TNR+TPR)/2
recall = TPR
precision = n0*TPR/(n0*TPR+(1-TNR)*(n-n0))
F2 = 5*precision*recall/(4*precision+recall)
if(is.na(F2)) F2=0
return(c(TPR=TPR,TNR=TNR,BA=BA,F2=F2))
}
count_DBSCAN(x, 0.05, l)
es_labels[c((n1+1):n)]
es_labels[c((n1+1):n)]==0
count_DBSCAN = function(data, cont, es_labels){
n0 = round(n*cont)
n1 = n-n0
TPR = sum(es_labels[c((n1+1):n)]==0)/n0
TNR = sum(es_labels[c(1:n1)]!=0)/n1
BA = (TNR+TPR)/2
recall = TPR
precision = n0*TPR/(n0*TPR+(1-TNR)*(n-n0))
F2 = 5*precision*recall/(4*precision+recall)
if(is.na(F2)) F2=0
return(c(TPR=TPR,TNR=TNR,BA=BA,F2=F2))
}
count_DBSCAN(x, 0.05, l)
